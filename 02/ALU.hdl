// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
    // Zero x
    Not16(in=x,out=pZx);
    And16(a=x,b=pZx,out=Zx);

    // Is zx enabled?
    Mux16(a=x,b=Zx,sel=zx,out=zxout);

    // Negate x
    Not16(in=zxout,out=nxout);

    // Is nx enabled?
    Mux16(a=zxout,b=nxout,sel=nx,out=xout);

    // Zero y
    Not16(in=y,out=pZy);
    And16(a=y,b=pZy,out=Zy);
   
    // Is zy enabled?
    Mux16(a=y,b=Zy,sel=zy,out=zyout); 

    // Negate y
    Not16(in=zyout,out=nyout);

    // Is ny enabled?
    Mux16(a=zyout,b=nyout,sel=ny,out=yout);

    // Add and And inputs
    Add16(a=xout,b=yout,out=addxy);
    And16(a=xout,b=yout,out=andxy);

    // select Add or And based on f input
    Mux16(a=andxy,b=addxy,sel=f,out=fxy);

    // Negate output
    Not16(in=fxy,out=pNo);

    // Is no enabled?
    Mux16(a=fxy,b=pNo,sel=no,out=out,out[15]=ng,out[0..7]=firstout,out[8..15]=secondout);
    Or8Way(in=firstout,out=nonzero1);
    Or8Way(in=secondout,out=nonzero2);
    Or(a=nonzero1,b=nonzero2,out=nonzero);
    Not(in=nonzero,out=zr);
}




